(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{433:function(a,t,e){"use strict";e.r(t);var r=e(21),n=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"同学的一次面试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同学的一次面试"}},[a._v("#")]),a._v(" 同学的一次面试")]),a._v(" "),e("h3",{attrs:{id:"内存溢出的两种问题及原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出的两种问题及原因"}},[a._v("#")]),a._v(" 内存溢出的两种问题及原因")]),a._v(" "),e("h3",{attrs:{id:"java-lang-outofmemoryerror"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-outofmemoryerror"}},[a._v("#")]),a._v(" java.lang.OutOfMemoryError")]),a._v(" "),e("p",[a._v("方法区主要存储类的元信息，实现在元数据区。当JVM发现元数据区没有足够的空间分配给加载的类时，抛出该异常。")]),a._v(" "),e("h3",{attrs:{id:"java-lang-stackoverflowerror"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-stackoverflowerror"}},[a._v("#")]),a._v(" java.lang.StackOverflowError")]),a._v(" "),e("p",[e("code",[a._v("抛出这个错误表明应用程序因为深递归导致栈被耗尽了。")]),a._v("每当java程序启动一个新的线程时，java虚拟机会为他分配一个栈，java栈以帧为单位保持线程运行状态；当线程调用一个方法是，jvm压入一个新的栈帧到这个线程的栈中，只要这个方法还没返回，这个栈帧就存在。 如果方法的嵌套调用层次太多(如递归调用),随着java栈中的帧的增多，最终导致这个线程的栈中的所有栈帧的大小的总和大于-Xss设置的值，而产生生"),e("code",[a._v("StackOverflowError")]),a._v("溢出异常。")]),a._v(" "),e("h3",{attrs:{id:"内存模型主要要回收那些类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存模型主要要回收那些类"}},[a._v("#")]),a._v(" 内存模型主要要回收那些类")]),a._v(" "),e("p",[a._v("不再使用的对象需要进行回收，不使用的类也有可能回收。")]),a._v(" "),e("h3",{attrs:{id:"如何查看gc状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何查看gc状态"}},[a._v("#")]),a._v(" 如何查看GC状态")]),a._v(" "),e("p",[a._v("使用"),e("code",[a._v("jstat")]),a._v("命令，（jstat [Options] vmid [interval] [count]）")]),a._v(" "),e("p",[e("strong",[a._v("参数说明")])]),a._v(" "),e("p",[a._v("Options，选项，我们一般使用 -gcutil 查看gc情况\nvmid，VM的进程号，即当前运行的java进程号\ninterval，间隔时间，单位为秒或者毫秒\ncount，打印次数，如果缺省则打印无数次")]),a._v(" "),e("p",[a._v("比如下面这里我们打印12538进程的GC情况")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/f6fed02e40cbf.png",alt:"image.png"}})]),a._v(" "),e("p",[e("strong",[a._v("使用阿里开源的Arthas")])]),a._v(" "),e("p",[a._v("参考")]),a._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/zlzlei/article/details/46471627",target:"_blank",rel:"noopener noreferrer"}},[a._v("Linux使用jstat命令查看jvm的GC情况_zlzlei的专栏-CSDN博客"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000019925820",target:"_blank",rel:"noopener noreferrer"}},[a._v("推荐一款阿里开源的 Java 诊断工具，好用到爆！ - SegmentFault 思否"),e("OutboundLink")],1)])]),a._v(" "),e("h3",{attrs:{id:"bean是线程安全的吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean是线程安全的吗"}},[a._v("#")]),a._v(" Bean是线程安全的吗")]),a._v(" "),e("p",[a._v("容器本身并没有提供Bean的线程安全策略，因此可以说Spring容器中的Bean本身不具备线程安全的特性，但是我们还需要结合不同的Bean进行研究")]),a._v(" "),e("p",[a._v("Spring 的 bean 作用域（scope）类型有5种：")]),a._v(" "),e("p",[a._v("1、singleton:单例，默认作用域。")]),a._v(" "),e("p",[a._v("2、prototype:原型，每次创建一个新对象。")]),a._v(" "),e("p",[a._v("3、request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下。")]),a._v(" "),e("p",[a._v("4、session:会话，同一个会话共享一个实例，不同会话使用不用的实例。")]),a._v(" "),e("p",[a._v("5、global-session:全局会话，所有会话共享一个实例。")]),a._v(" "),e("p",[a._v("Spring中的Bean默认是单例模式的，框架并没有对bean进行多线程的封装处理。实际上大部分时间Bean是无状态的（比如Dao） 所以说在某种程度上来说Bean其实是安全的。")]),a._v(" "),e("p",[a._v("参考： "),e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1743283",target:"_blank",rel:"noopener noreferrer"}},[a._v("面试：Spring 中的bean 是线程安全的吗？ - 云+社区 - 腾讯云 (tencent.com)"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"sleep-0-可以干嘛"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sleep-0-可以干嘛"}},[a._v("#")]),a._v(" Sleep(0)可以干嘛")]),a._v(" "),e("p",[a._v("Thread.Sleep(0) 并非是真的要线程挂起0毫秒，意义在于这次调用Thread.Sleep(0)的当前线程确实的被冻结了一下，让其他线程有机会优先执行。Thread.Sleep(0) 是你的线程暂时放弃cpu，也就是释放一些未用的时间片给其他线程或进程使用，就相当于一个让位动作。")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/qiaoquan3/article/details/56281092",target:"_blank",rel:"noopener noreferrer"}},[a._v("Sleep(0)的妙用_HawkJony的博客-CSDN博客"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"大佬的面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大佬的面试题"}},[a._v("#")]),a._v(" 大佬的面试题")]),a._v(" "),e("h3",{attrs:{id:"堆分析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆分析器"}},[a._v("#")]),a._v(" 堆分析器")]),a._v(" "),e("p",[a._v("使用"),e("strong",[a._v("MAT")]),a._v("来进行分析")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/wuyuxing24/article/details/105456317",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java堆分析器 - Eclipse Memory Analyzer Tool(MAT)_旧路-CSDN博客_java mat"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"静态变量什么时候会被回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态变量什么时候会被回收"}},[a._v("#")]),a._v(" 静态变量什么时候会被回收")]),a._v(" "),e("p",[e("strong",[a._v("静态成员一般也可以分为静态基本类型和静态引用类型。")])]),a._v(" "),e("p",[a._v("静态基本类型存储在在静态变量区域；静态引用类型的引用存储在静态变量区域，而实例（具体内容）存储在堆上。静态成员只存在一份，静态成员加载时机：类加载的时候（第一次访问），这个类中所有静态成员就会被加载在静态存储区，同时存储在"),e("a",{attrs:{href:"https://blog.csdn.net/oTengYue/article/details/48108995#",target:"_blank",rel:"noopener noreferrer"}},[a._v("静态变量区域的成员一旦创建，直到程序退出才会被回收"),e("OutboundLink")],1),a._v("。（注：如果是引用类型，如static student myst=new student()，myst=null这时候，在静态存储区里面存的是一个地址（myst），这个地址指向在堆里面创建的student实例对象，当myst=null的时候，在静态存储区里面的变量会一直存在，但是在堆里面的student实例对象因为没有变量指向它，所以会被回收）。因此如果不用的静态引用类型可以通过设置=null方式让GC可以回收其堆上的空间。")]),a._v(" "),e("h2",{attrs:{id:"知乎上看到的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#知乎上看到的"}},[a._v("#")]),a._v(" 知乎上看到的")]),a._v(" "),e("h3",{attrs:{id:"对象如何进行深拷贝-除了clone"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象如何进行深拷贝-除了clone"}},[a._v("#")]),a._v(" 对象如何进行深拷贝，除了clone")]),a._v(" "),e("p",[a._v("特地谷歌了一下，发现居然还有很多方法")]),a._v(" "),e("ol",[e("li",[a._v("使用构造函数进行深拷贝")]),a._v(" "),e("li",[a._v("重载clone方法")]),a._v(" "),e("li",[a._v("使用Apache Commons Lang进行序列化")]),a._v(" "),e("li",[a._v("使用Gson序列化")]),a._v(" "),e("li",[a._v("使用Jackson序列化")])]),a._v(" "),e("p",[e("a",{attrs:{href:"https://wudashan.com/2018/10/14/Java-Deep-Copy/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java如何对一个对象进行深拷贝？ - 吴大山的博客 | Wudashan Blog"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"happen-before原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#happen-before原则"}},[a._v("#")]),a._v(" happen-before原则")]),a._v(" "),e("p",[a._v("这个是java内存模型里的，具体参考")]),a._v(" "),e("p",[e("a",{attrs:{href:"http://interview.xiaoyou66.com/pages/b38788/",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM模型 | 面试问题浓缩总结 (xiaoyou66.com)"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"单例对象会被jvm的gc时回收吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单例对象会被jvm的gc时回收吗"}},[a._v("#")]),a._v(" 单例对象会被jvm的gc时回收吗")]),a._v(" "),e("p",[a._v("java中单例模式创建的对象被自己类中的静态属性所引用，符合第二条，因此，单例对象不会被jvm垃圾收集。")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/qq876551724/article/details/78805138",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java中单例对象不会被GC回收_qq876551724的博客-CSDN博客"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);