(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{436:function(a,t,e){"use strict";e.r(t);var r=e(21),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("集合框架也可以叫容器。（集合是用于存储数据的容器）")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/af1999626766e.png",alt:"image-20210323085103081"}})]),a._v(" "),e("p",[a._v("常问的有下面几个")]),a._v(" "),e("ol",[e("li",[a._v("ArrayList")]),a._v(" "),e("li",[a._v("LinkList")]),a._v(" "),e("li",[a._v("HashSet")]),a._v(" "),e("li",[a._v("TreeSet")]),a._v(" "),e("li",[a._v("HashMap")])]),a._v(" "),e("h2",{attrs:{id:"线程安全的集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程安全的集合"}},[a._v("#")]),a._v(" 线程安全的集合")]),a._v(" "),e("ol",[e("li",[a._v("ConcurrentHashMap（线程安全的map，这个会考一下那个锁升级的过程，指的是 synchronized 关键字）")]),a._v(" "),e("li",[a._v("CopyOnWriteArrayList（线程安全的list）")]),a._v(" "),e("li",[a._v("CopyOnWriteArraySet（线程安全的set）")]),a._v(" "),e("li",[a._v("Vector和HashTable（早期的线程安全集合，不过被弃用了）")])]),a._v(" "),e("p",[a._v("参考："),e("a",{attrs:{href:"https://blog.csdn.net/lixiaobuaa/article/details/79689338",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java线程安全的集合详解_长风-CSDN博客_线程安全的集合有哪些"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"hashmap-重点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-重点"}},[a._v("#")]),a._v(" HashMap（重点）")]),a._v(" "),e("h3",{attrs:{id:"hashmap的底层原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的底层原理"}},[a._v("#")]),a._v(" HashMap的底层原理")]),a._v(" "),e("p",[a._v("在JDK1.8之前，我们使用的是位桶+链表实现")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/adb442bceddce.png",alt:"img"}})]),a._v(" "),e("p",[a._v("1.8之后使用的是位桶+链表+红黑树实现")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/a428fd1e494fb.png",alt:"0-00000031"}})]),a._v(" "),e("h3",{attrs:{id:"hashmap扩容-1-8以后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap扩容-1-8以后"}},[a._v("#")]),a._v(" Hashmap扩容（1.8以后）")]),a._v(" "),e("ul",[e("li",[a._v("当我们的链表长度超过8时，就会把链表转换为红黑树，长度小于6时有红黑树变成链表")]),a._v(" "),e("li",[a._v("当链表数组（也叫hash表）的容量超过0.75时（加载因子），那么整个HashMap就会扩大为原来的两倍")]),a._v(" "),e("li",[a._v("默认hash表大小为16（为了实现均匀分布）")]),a._v(" "),e("li",[a._v("扩容分两部，第一是创建一个新Entry的数组，长度为原来的两倍，然后在遍历原Entry数组，把所有的Entry重新Hash到新数组。（为什么要Rehash？是因为长度扩大以后，Hash的规则也随之改变。）")])]),a._v(" "),e("h3",{attrs:{id:"头插法和尾插法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#头插法和尾插法"}},[a._v("#")]),a._v(" 头插法和尾插法")]),a._v(" "),e("p",[a._v("1.8之前使用的是头插法（即每次插入都是在链表的头部插入的），1.8之后使用的是尾插法，为什么？")]),a._v(" "),e("p",[a._v("因为头插法会存在链表成环的问题")]),a._v(" "),e("h3",{attrs:{id:"数据插入流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据插入流程"}},[a._v("#")]),a._v(" 数据插入流程")]),a._v(" "),e("p",[a._v("往map插入元素的时候首先通过对key hash然后与数组长度-1进行与运算((n-1)&hash)，都是2的次幂所以等同于取模，但是位运算的效率更高。找到数组中的位置之后，如果数组中没有元素直接存入，反之则判断key是否相同，key相同就覆盖，否则就会插入到链表的尾部，如果链表的长度超过8，则会转换成红黑树，最后判断数组长度是否超过默认的长度*负载因子也就是12，超过则进行扩容。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/30/c83536ef87158.jpg",alt:"img"}})]),a._v(" "),e("p",[a._v("参考")]),a._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/0Gf2DzuzgEx0i3mHVvhKNQ",target:"_blank",rel:"noopener noreferrer"}},[a._v("《吊打面试官》系列-HashMap (qq.com)"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/tuke_tuke/article/details/51588156",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java中HashMap底层实现原理(JDK1.8)源码分析_tuke_tuke的博客-CSDN博客_hashmap底层"),e("OutboundLink")],1)])]),a._v(" "),e("h2",{attrs:{id:"list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[a._v("#")]),a._v(" List")]),a._v(" "),e("p",[a._v("这个地方问的会少一些")]),a._v(" "),e("ul",[e("li",[a._v("ArrayList是基于数组实现的，非线程安全，每次扩容为1.5倍，默认大小为10（源码里：DEFAULT_CAPACITY = 10;），扩容时会创建一个型的大数组，然后把之前的内容拷贝到新数组里")]),a._v(" "),e("li",[a._v("LinkedList是基于双向链表，非线程安全，不需要扩容（因为是基于链表）")]),a._v(" "),e("li",[a._v("ArrayList最大容量不超过Integer的最大值")])]),a._v(" "),e("p",[e("strong",[a._v("适用场景")])]),a._v(" "),e("p",[a._v("ArrayList适用于频繁查询和获取数据，LinkedList适合频繁地增加或删除数据")]),a._v(" "),e("h2",{attrs:{id:"set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[a._v("#")]),a._v(" Set")]),a._v(" "),e("p",[a._v("主要考TreeSet和HashSet，Set 注重独一无二的性质,用于"),e("code",[a._v("存储无序元素")]),a._v("， "),e("code",[a._v("值不能重复")]),a._v("。")]),a._v(" "),e("ul",[e("li",[a._v("HashSet基于HashMap实现，其实就是把HashMaP的值改成空")]),a._v(" "),e("li",[a._v("TreeSet基于TreeMap实现")]),a._v(" "),e("li",[a._v("LinkedHashSet（继承自HashSet，底层是LinkedHashMap HashSet+LinkedHashMap）")]),a._v(" "),e("li",[a._v("BitSet（位集，底层是long数组，用于替代List）")]),a._v(" "),e("li",[a._v("CopyOnWriteArraySet（线程安全的，底层是CopyOnWriteArrayList）")])]),a._v(" "),e("p",[a._v("参考："),e("a",{attrs:{href:"https://blog.csdn.net/weixin_44777669/article/details/109440033",target:"_blank",rel:"noopener noreferrer"}},[a._v("java Set学习_冷雨清的博客-CSDN博客"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"concurrenthashmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[a._v("#")]),a._v(" ConcurrentHashMap")]),a._v(" "),e("p",[e("strong",[a._v("1.8之前")])]),a._v(" "),e("p",[a._v("采用了分段锁技术，其中 Segment 继承于 ReentrantLock。不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，理论上 支持 CurrencyLevel (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。虽然效率提高了，但是查询遍历的效率还是太低了")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/8a7f3c6bf907b.jpg",alt:"img"}})]),a._v(" "),e("p",[e("strong",[a._v("1.8之后")])]),a._v(" "),e("p",[a._v("采用CAS+Synchronized")]),a._v(" "),e("p",[a._v("参考")]),a._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/",target:"_blank",rel:"noopener noreferrer"}},[a._v("HashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！ | crossoverJie's Blog"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);