(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{447:function(t,a,_){"use strict";_.r(a);var v=_(21),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),_("p",[t._v("事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。以BEGIN TRANSACTION开始，以ROLLBACK/COMMIT结束")]),t._v(" "),_("h2",{attrs:{id:"事务四个特性-acid"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务四个特性-acid"}},[t._v("#")]),t._v(" 事务四个特性（ACID）")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("原子性")]),t._v("（Atomicity）：逻辑上是不可分割的操作单元，事务的所有操作要么全部提交成功，要么全部失败回滚（用回滚日志实现，反向执行日志中的操作）；")]),t._v(" "),_("li",[_("strong",[t._v("一致性")]),t._v("（Consistency）：事务的执行必须使数据库保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的；")]),t._v(" "),_("li",[_("strong",[t._v("隔离性")]),t._v("（Isolation）：一个事务所做的修改在最终提交以前，对其它事务是不可见的（并发执行的事务之间不能相互影响）；")]),t._v(" "),_("li",[_("strong",[t._v("持久性")]),t._v("（Durability）：一旦事务提交成功，对数据的修改是永久性的")])]),t._v(" "),_("h3",{attrs:{id:"四个特性分别是通过什么实现的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四个特性分别是通过什么实现的"}},[t._v("#")]),t._v(" 四个特性分别是通过什么实现的")]),t._v(" "),_("p",[t._v("A原子性由undo log日志保证，它记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的sql")]),t._v(" "),_("p",[t._v("C一致性一般由代码层面来保证")]),t._v(" "),_("p",[t._v("I隔离性由MVCC来保证")]),t._v(" "),_("p",[t._v("D持久性由内存+redo log来保证，mysql修改数据同时在内存和redo log记录这次操作，事务提交的时候通过redo log刷盘，宕机的时候可以从redo log恢复")]),t._v(" "),_("h2",{attrs:{id:"并发一致的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发一致的问题"}},[t._v("#")]),t._v(" 并发一致的问题")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("丢失修改")]),t._v("：一个事务对数据进行了修改，在事务提交之前，另一个事务对同一个数据进行了修改，覆盖了之前的修改；")]),t._v(" "),_("li",[_("strong",[t._v("脏读")]),t._v("（Dirty Read）：一个事务读取了被另一个事务修改、但未提交（进行了回滚）的数据，造成两个事务得到的数据不一致；")]),t._v(" "),_("li",[_("strong",[t._v("不可重复读")]),t._v("（Nonrepeatable Read）：在同一个事务中，某查询操作在一个时间读取某一行数据和之后一个时间读取该行数据，发现数据已经发生修改（可能被更新或删除了）；")]),t._v(" "),_("li",[_("strong",[t._v("幻读")]),t._v("（Phantom Read）：当同一查询多次执行时，由于其它事务在这个数据范围内执行了"),_("strong",[t._v("插入操作")]),t._v("，会导致每次返回不同的结果集（和不可重复读的区别：针对的是一个数据整体/范围；并且需要是插入操作）")])]),t._v(" "),_("h2",{attrs:{id:"数据库的四种隔离级别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库的四种隔离级别"}},[t._v("#")]),t._v(" 数据库的四种隔离级别")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("未提交读")]),t._v("（Read Uncommited）：在一个事务提交之前，它的执行结果对其它事务也是可见的。会导致脏读、不可重复读、幻读；")]),t._v(" "),_("li",[_("strong",[t._v("提交读")]),t._v("（Read Commited）：一个事务只能看见已经提交的事务所作的改变。可避免脏读问题；")]),t._v(" "),_("li",[_("strong",[t._v("可重复读")]),t._v("（Repeatable Read）：可以确保同一个事务在多次读取同样的数据时得到相同的结果。（MySQL的默认隔离级别）。可避免不可重复读，但是存在幻读现象；\n"),_("ul",[_("li",[t._v("如何实现？是通过MVCC的ReadView来实现")]),t._v(" "),_("li",[t._v("参考：（"),_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/166152616",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 的可重复读到底是怎么实现的？图解 ReadView 机制 - 知乎 (zhihu.com)"),_("OutboundLink")],1),t._v("）")])])]),t._v(" "),_("li",[_("strong",[t._v("可串行化")]),t._v("（Serializable）：强制事务串行执行，使之不可能相互冲突，从而解决幻读问题。可能导致大量的超时现象和锁竞争，实际很少使用。\n"),_("ul",[_("li",[t._v("如何实现? 读的时候加上共享锁，写的时候加上排他锁就可以实现了")])])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/22/4a985812077b5.png",alt:"各个隔离级别下产生的问题"}})]),t._v(" "),_("p",[t._v("深入参考："),_("a",{attrs:{href:"https://tech.meituan.com/2014/08/20/innodb-lock.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Innodb中的事务隔离级别和锁的关系 - 美团技术团队 (meituan.com)"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"事务的几种类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务的几种类型"}},[t._v("#")]),t._v(" 事务的几种类型")]),t._v(" "),_("h4",{attrs:{id:"扁平事务-flat-transactions"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#扁平事务-flat-transactions"}},[t._v("#")]),t._v(" 扁平事务(Flat Transactions)")]),t._v(" "),_("p",[t._v("是事务类型中最简单的一种，但在实际生产环境中，这可能是使用最为频繁的事务。在扁平事务中，所有操作都处于同一层次，其由BEGIN WORK开始，由COMMITWORK或ROLLBACK WORK结束，其间的操作是原子的，要么都执行，要么都回滚。")]),t._v(" "),_("h4",{attrs:{id:"带有保存点的扁平事务-flat-transactions-with-savepoints"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#带有保存点的扁平事务-flat-transactions-with-savepoints"}},[t._v("#")]),t._v(" 带有保存点的扁平事务(Flat Transactions with Savepoints)")]),t._v(" "),_("p",[t._v("除了支持扁平事务支持的操作外，允许在事务执行过程中回滚到同一事务中较早的一个状态。这是因为某些事务可能在执行过程中出现的错误并不会导致所有的操作都无效，放弃整个事务不合乎要求，开销也太大。保存点（Savepoint）用来通知系统应该记住事务当前的状态，以便当之后发生错误时，事务能回到保存点当时的状态。")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("保存点用SAVE WORK函数来建立，通知系统记录当前的处理状态。")]),t._v(" 当出现问题时，保存点能用作内部的重启动点，根据应用逻辑，决定是回到最近一个保存点还是其他更早的保存点。")])]),t._v(" "),_("h4",{attrs:{id:"链事务-chained-transactions"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链事务-chained-transactions"}},[t._v("#")]),t._v(" 链事务(Chained Transactions)")]),t._v(" "),_("p",[t._v("可视为保存点模式的一种变种。带有保存点的扁平事务，当发生系统崩溃时，所有的保存点都将消失，因为其保存点是易失的（volatile），而非持久的（persistent）。")]),t._v(" "),_("blockquote",[_("p",[t._v("链事务的思想是：在提交一个事务时，释放不需要的数据对象，将必要的处理上下文隐式地传给下一个要开始的事务。注意，提交事务操作和开始下一个事务操作将合并为一个原子操作。这意味着下一个事务将看到上一个事务的结果，就好像在一个事务中进行的一样。")]),t._v(" "),_("p",[t._v("链事务与带有保存点的扁平事务不同的是，带有保存点的扁平事务能回滚到任意正确的保存点。而链事务中的回滚仅限于当前事务，即只能恢复到最近一个的保存点。对于锁的处理，两者也不相同。链事务在执行COMMIT后即释放了当前事务所持有的锁，而带有保存点的扁平事务不影响迄今为止所持有的锁。")])]),t._v(" "),_("h4",{attrs:{id:"嵌套事务-nested-transactions"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#嵌套事务-nested-transactions"}},[t._v("#")]),t._v(" 嵌套事务(Nested Transactions)")]),t._v(" "),_("p",[t._v("是一个层次结构框架。由一个顶层事务（top-level transaction）控制着各个层次的事务。顶层事务之下嵌套的事务被称为子事务（subtransaction），其控制每一个局部的变换。")]),t._v(" "),_("h4",{attrs:{id:"分布式事务-distributed-transactions"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务-distributed-transactions"}},[t._v("#")]),t._v(" 分布式事务(Distributed Transactions)")]),t._v(" "),_("p",[t._v("通常是一个在分布式环境下运行的扁平事务，因此需要根据数据所在位置访问网络中的不同节点。")]),t._v(" "),_("p",[t._v("对于InnoDB存储引擎来说，其支持扁平事务、带有保存点的事务、链事务、分布式事务。对于嵌套事务，其并不原生支持。")]),t._v(" "),_("h2",{attrs:{id:"脏读、幻度、不可重复读"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#脏读、幻度、不可重复读"}},[t._v("#")]),t._v(" 脏读、幻度、不可重复读")]),t._v(" "),_("h3",{attrs:{id:"脏读-读取未提交数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#脏读-读取未提交数据"}},[t._v("#")]),t._v(" 脏读（读取未提交数据）")]),t._v(" "),_("p",[t._v("A事务读取B事务尚未提交的数据，此时如果B事务发生错误并执行回滚操作，那么A事务读取到的数据就是脏数据。就好像原本的数据比较干净、纯粹，此时由于B事务更改了它，这个数据变得不再纯粹。这个时候A事务立即读取了这个脏数据，但事务B良心发现，又用回滚把数据恢复成原来干净、纯粹的样子，而事务A却什么都不知道，最终结果就是事务A读取了此次的脏数据，称为脏读。")]),t._v(" "),_("h3",{attrs:{id:"不可重复读-前后多次读取-数据内容不一致"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读-前后多次读取-数据内容不一致"}},[t._v("#")]),t._v(" 不可重复读（前后多次读取，数据内容不一致）")]),t._v(" "),_("p",[t._v("事务A在执行读取操作，由整个事务A比较大，前后读取同一条数据需要经历很长的时间 。而在事务A第一次读取数据，比如此时读取了小明的年龄为20岁，事务B执行更改操作，将小明的年龄更改为30岁，此时事务A第二次读取到小明的年龄时，发现其年龄是30岁，和之前的数据不一样了，也就是数据不重复了，系统不可以读取到重复的数据，成为不可重复读。")]),t._v(" "),_("h3",{attrs:{id:"幻读-前后多次读取-数据总量不一致"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#幻读-前后多次读取-数据总量不一致"}},[t._v("#")]),t._v(" 幻读（前后多次读取，数据总量不一致）")]),t._v(" "),_("p",[t._v("事务A在执行读取操作，需要两次统计数据的总量，前一次查询数据总量后，此时事务B执行了新增数据的操作并提交后，这个时候事务A读取的数据总量和之前统计的不一样，就像产生了幻觉一样，平白无故的多了几条数据，成为幻读。")]),t._v(" "),_("h3",{attrs:{id:"不可重复读和幻读的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读和幻读的区别"}},[t._v("#")]),t._v(" 不可重复读和幻读的区别？")]),t._v(" "),_("p",[t._v("(1) 不可重复读是读取了其他事务更改的数据，"),_("strong",[t._v("针对update操作")])]),t._v(" "),_("p",[t._v("解决：使用行级锁，锁定该行，事务A多次读取操作完成后才释放该锁，这个时候才允许其他事务更改刚才的数据。")]),t._v(" "),_("p",[t._v("(2) 幻读是读取了其他事务新增的数据，"),_("strong",[t._v("针对insert和delete操作")])]),t._v(" "),_("p",[t._v("解决：使用表级锁，锁定整张表，事务A多次读取数据总量之后才释放该锁，这个时候才允许其他事务新增数据。")]),t._v(" "),_("p",[t._v("这时候再理解事务隔离级别就简单多了呢。")]),t._v(" "),_("h3",{attrs:{id:"如何避免脏读和幻读"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何避免脏读和幻读"}},[t._v("#")]),t._v(" 如何避免脏读和幻读")]),t._v(" "),_("p",[t._v("使用好事务的四种隔离级别")]),t._v(" "),_("p",[t._v("隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。")]),t._v(" "),_("h2",{attrs:{id:"mvcc-多版本并发控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-多版本并发控制"}},[t._v("#")]),t._v(" MVCC 多版本并发控制")]),t._v(" "),_("p",[t._v("全称Multi-Version Concurrency Control，即"),_("code",[t._v("多版本并发控制")]),t._v("，主要是为了提高数据库的"),_("code",[t._v("并发性能")]),t._v("。以下文章都是围绕InnoDB引擎来讲，因为myIsam不支持事务。")]),t._v(" "),_("h3",{attrs:{id:"当前读-快照度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#当前读-快照度"}},[t._v("#")]),t._v(" 当前读，快照度")]),t._v(" "),_("p",[_("strong",[t._v("当前读")]),t._v(" 它读取的数据库记录，都是"),_("code",[t._v("当前最新")]),t._v("的"),_("code",[t._v("版本")]),t._v("，会对当前读取的数据进行"),_("code",[t._v("加锁")]),t._v("，防止其他事务修改数据。是"),_("code",[t._v("悲观锁")]),t._v("的一种操作。")]),t._v(" "),_("p",[_("strong",[t._v("快照读")]),t._v(" 快照读的实现是基于"),_("code",[t._v("多版本")]),t._v("并发控制，即MVCC，既然是多版本，那么快照读读到的数据不一定是当前最新的数据，有可能是之前"),_("code",[t._v("历史版本")]),t._v("的数据。")]),t._v(" "),_("h3",{attrs:{id:"实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),_("p",[t._v("主要是"),_("code",[t._v("版本链")]),t._v("，"),_("code",[t._v("undo日志")]),t._v(" ，"),_("code",[t._v("Read View")]),t._v("来实现的")]),t._v(" "),_("p",[_("strong",[t._v("版本链")]),t._v("   数据库里面会有三个隐藏字段，分别是"),_("code",[t._v("db_trx_id")]),t._v("（事务id）、"),_("code",[t._v("db_roll_pointer")]),t._v("（回滚指针，也叫undo log索引）、"),_("code",[t._v("db_row_id")]),t._v("（自增id）")]),t._v(" "),_("p",[_("strong",[t._v("undo日志")]),t._v(" 主要用于"),_("code",[t._v("记录")]),t._v("数据被"),_("code",[t._v("修改之前")]),t._v("的日志，在表信息修改之前先会把数据拷贝到"),_("code",[t._v("undo log")]),t._v("里。当"),_("code",[t._v("事务")]),t._v("进行"),_("code",[t._v("回滚时")]),t._v("可以通过undo log 里的日志进行"),_("code",[t._v("数据还原")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("Read View")]),t._v(" 读视图，在该事务执行的快照读的那一刻，会生成数据库系统当前的一个"),_("code",[t._v("快照")]),t._v("。Read View主要是用来做"),_("code",[t._v("可见性")]),t._v("判断的, 即当我们"),_("code",[t._v("某个事务")]),t._v("执行"),_("code",[t._v("快照读")]),t._v("的时候，对该记录创建一个Read View读视图，把它比作条件用来判断"),_("code",[t._v("当前事务")]),t._v("能够看到"),_("code",[t._v("哪个版本")]),t._v("的数据，既可能是当前"),_("code",[t._v("最新")]),t._v("的数据，也有可能是该行记录的undo log里面的"),_("code",[t._v("某个版本")]),t._v("的数据。（可重复读就是通过这个来实现的，这个主要是一个规则，会按照一定的规则来对里面的数据进行读取）")]),t._v(" "),_("h2",{attrs:{id:"两段锁协议和乐观并发控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#两段锁协议和乐观并发控制"}},[t._v("#")]),t._v(" 两段锁协议和乐观并发控制")]),t._v(" "),_("p",[t._v("参考："),_("a",{attrs:{href:"https://juejin.cn/post/6871046354018238472#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("全网最全一篇数据库MVCC详解，不全你打我 (juejin.cn)"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"mysql的几种锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql的几种锁"}},[t._v("#")]),t._v(" MySQL的几种锁")]),t._v(" "),_("h3",{attrs:{id:"间隙锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#间隙锁"}},[t._v("#")]),t._v(" 间隙锁")]),t._v(" "),_("p",[t._v("间隙锁是可重复读级别下才会有的锁，结合MVCC和间隙锁可以解决幻读的问题。")])])}),[],!1,null,null,null);a.default=r.exports}}]);