(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{464:function(t,v,_){"use strict";_.r(v);var a=_(21),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),_("h3",{attrs:{id:"内存分页和内存分段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存分页和内存分段"}},[t._v("#")]),t._v(" 内存分页和内存分段")]),t._v(" "),_("p",[t._v("内存分页分为一个页号还有一个偏移量，我们通过页号查找页表，找出对应地址，然后加上偏移量就可以得到最终地址")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/29f1ff4a1ccca.png",alt:"image-20210304165813475"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/b954d7500b353.png",alt:"image-20210304165933575"}})]),t._v(" "),_("p",[t._v("内存分段的步骤如下")]),t._v(" "),_("ol",[_("li",[t._v("先提取段号")]),t._v(" "),_("li",[t._v("然后查找段表找出这段的起始物理地址")]),t._v(" "),_("li",[t._v("然后比较偏移量和端长度，如果超出则无效")]),t._v(" "),_("li",[t._v("物理地址等于 端起始地址+段内偏移量")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/23/02d1cc9ed2602.png",alt:"image-20210323223337442"}})]),t._v(" "),_("h3",{attrs:{id:"内存置换算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存置换算法"}},[t._v("#")]),t._v(" 内存置换算法")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("最佳页面置换算法")]),t._v("OPT（Optimal replacement algorithm） 置换以后不需要或者最远的将来才需要的页面，是一种理论上的算法，是最优策略；")]),t._v(" "),_("li",[_("strong",[t._v("先进先出")]),t._v("FIFO 置换在内存中驻留时间最长的页面。缺点：有可能将那些经常被访问的页面也被换出，从而使缺页率升高；")]),t._v(" "),_("li",[_("strong",[t._v("第二次机会算法")]),t._v("SCR 按FIFO选择某一页面，若其访问位为1，给第二次机会，并将访问位置0；")]),t._v(" "),_("li",[_("strong",[t._v("时钟算法")]),t._v(" Clock：SCR中需要将页面在链表中移动（第二次机会的时候要将这个页面从链表头移到链表尾），时钟算法使用环形链表，再使用一个指针指向最老的页面，避免了移动页面的开销；")]),t._v(" "),_("li",[_("strong",[t._v("最近未使用算法")]),t._v("NRU（Not Recently Used） 检查访问位R、修改位M，优先置换R=M=0，其次是（R=0, M=1）；")]),t._v(" "),_("li",[_("strong",[t._v("最近最少使用算法")]),t._v("LRU（Least Recently Used） 置换出未使用时间最长的一页；实现方式：维护时间戳，或者维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。")]),t._v(" "),_("li",[_("strong",[t._v("最不经常使用算法")]),t._v("NFU 置换出访问次数最少的页面")])]),t._v(" "),_("h3",{attrs:{id:"内部碎片和外部碎片"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内部碎片和外部碎片"}},[t._v("#")]),t._v(" 内部碎片和外部碎片")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("内部碎片")]),t._v("：已经被分配出去的的内存空间不经常使用，并且分配出去的内存空间大于请求所需的内存空间。")]),t._v(" "),_("li",[_("strong",[t._v("外部碎片")]),t._v("：指可用空间还没有分配出去，但是可用空间由于大小太小而无法分配给申请空间的新进程的内存空间空闲块。")])]),t._v(" "),_("h3",{attrs:{id:"快表-tlb"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快表-tlb"}},[t._v("#")]),t._v(" 快表 TLB")]),t._v(" "),_("p",[t._v("也叫"),_("code",[t._v("地址转换后援缓冲器")]),t._v("实质是cache，它所缓存的是最近使用的数据的页表项（虚拟地址到物理地址的映射）。他的出现是为了加快访问数据（内存）的速度，减少重复的页表查找。当然它不是必须要有的。")]),t._v(" "),_("h3",{attrs:{id:"内存管理单元-mmu"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存管理单元-mmu"}},[t._v("#")]),t._v(" 内存管理单元 MMU")]),t._v(" "),_("p",[t._v("是一种负责处理CPU内存访问请求的计算机硬件。它的功能包括"),_("strong",[t._v("虚拟地址到物理地址的转换、内存保护、中央处理器高速缓存的控制")]),t._v("。现代 CPU 基本上都选择了使用 MMU。")]),t._v(" "),_("h2",{attrs:{id:"面试问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试问题"}},[t._v("#")]),t._v(" 面试问题")]),t._v(" "),_("h3",{attrs:{id:"物理地址、逻辑地址、线性地址"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#物理地址、逻辑地址、线性地址"}},[t._v("#")]),t._v(" 物理地址、逻辑地址、线性地址")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("物理地址")]),t._v(" 它是地址转换的最终地址，是内存单元"),_("strong",[t._v("真正的")]),t._v("地址。如果采用了"),_("strong",[t._v("分页机制")]),t._v("，那么线性地址会通过"),_("strong",[t._v("页目录和页表")]),t._v("的方式转换为物理地址。如果没有启用则线性地址即为物理地址")]),t._v(" "),_("li",[_("strong",[t._v("逻辑地址")]),t._v(" 在编写c语言的时候，通过&操作符可以读取指针变量本身的值，这个值就是"),_("strong",[t._v("逻辑地址")]),t._v("。实际上是当前进程的数据段的地址，和真实的物理地址没有关系。只有当在Intel实模式下，逻辑地址==物理地址。我们平时的应用程序都是通过和逻辑地址打交道，至于分页，分段机制对他们而言是透明的。逻辑地址也称作虚拟地址")]),t._v(" "),_("li",[_("strong",[t._v("线性地址")]),t._v(" 线性地址是逻辑地址到物理地址的"),_("strong",[t._v("中间层")]),t._v("。我们编写的代码会存在一个逻辑地址或者是段中的偏移地址，通过相应的计算(加上基地址)生成线性地址。此时如果采用了分页机制，那么吸纳行地址再经过变换即产生物理地址。在Intelk 80386中地址空间容量为4G，各个进程地址空间隔离，意味着每个进程独享4G线性空间。多个进程难免出现进程之间的切换，线性空间随之切换。基于分页机制，对于4GB的线性地址一部分会被映射到物理内存，一部分映射到"),_("strong",[t._v("磁盘")]),t._v("作为交换文件，一部分没有映射，通过下面加深一下印象")])]),t._v(" "),_("h3",{attrs:{id:"虚拟内存的应用与优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟内存的应用与优点"}},[t._v("#")]),t._v(" 虚拟内存的应用与优点")]),t._v(" "),_("p",[t._v("虚拟内存很适合在多道程序设计系统中使用，许多程序的片段同时保存在内存中。当一个程序等待它的一部分读入内存时，可以把CPU交给另一个进程使用。虚拟内存的使用可以带来以下好处：")]),t._v(" "),_("ul",[_("li",[t._v("在内存中可以保留多个进程，系统并发度提高")]),t._v(" "),_("li",[t._v("解除了用户与内存之间的紧密约束，进程可以比内存的全部空间还大")])]),t._v(" "),_("h3",{attrs:{id:"颠簸"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#颠簸"}},[t._v("#")]),t._v(" 颠簸")]),t._v(" "),_("p",[t._v("颠簸本质上是指频繁的页调度行为，具体来讲，进程发生缺页中断，这时，必须置换某一页。然而，其他所有的页都在使用，它置换一个页，但又立刻再次需要这个页。因此，会不断产生缺页中断，导致整个系统的效率急剧下降，这种现象称为颠簸（抖动）。")]),t._v(" "),_("p",[t._v("内存颠簸的解决策略包括：")]),t._v(" "),_("ul",[_("li",[t._v("如果是因为页面替换策略失误，可以修改替换算法来解决这个问题；")]),t._v(" "),_("li",[t._v("如果是因为运行的程序太多，造成程序无法同时将所有频繁访问的页面调入内存，则要降低多道程序的数量；")]),t._v(" "),_("li",[t._v("否则，还剩下两个办法：终止该进程或增加物理内存容量。")])])])}),[],!1,null,null,null);v.default=s.exports}}]);