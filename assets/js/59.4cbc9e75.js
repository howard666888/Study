(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{467:function(t,v,_){"use strict";_.r(v);var a=_(21),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"什么是缓冲区溢出-有什么危害-其原因是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓冲区溢出-有什么危害-其原因是什么"}},[t._v("#")]),t._v(" 什么是缓冲区溢出？有什么危害？其原因是什么？")]),t._v(" "),_("p",[t._v("缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据上。")]),t._v(" "),_("p",[t._v("危害有以下两点：")]),t._v(" "),_("ul",[_("li",[t._v("程序崩溃，导致拒绝额服务")]),t._v(" "),_("li",[t._v("跳转并且执行一段恶意代码")])]),t._v(" "),_("p",[t._v("造成缓冲区溢出的主要原因是程序中没有仔细检查用户输入。")]),t._v(" "),_("h3",{attrs:{id:"分页和分段有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分页和分段有什么区别"}},[t._v("#")]),t._v(" 分页和分段有什么区别？")]),t._v(" "),_("p",[t._v("段式存储管理是一种符合用户视角的内存分配管理方案。在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）")]),t._v(" "),_("p",[t._v("页式存储管理方案是一种用户视角内存与物理内存相分离的内存分配管理方案。在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的帧，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）。")]),t._v(" "),_("p",[_("strong",[t._v("两者的不同点：")])]),t._v(" "),_("ul",[_("li",[t._v("目的不同：分页是由于系统管理的需要而不是用户的需要，它是信息的物理单位；分段的目的是为了能更好地满足用户的需要，它是信息的逻辑单位，它含有一组其意义相对完整的信息；")]),t._v(" "),_("li",[t._v("大小不同：页的大小固定且由系统决定，而段的长度却不固定，由其所完成的功能决定；")]),t._v(" "),_("li",[t._v("地址空间不同： 段向用户提供二维地址空间；页向用户提供的是一维地址空间；")]),t._v(" "),_("li",[t._v("信息共享：段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制；")]),t._v(" "),_("li",[t._v("内存碎片：页式存储管理的优点是没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）；而段式管理的优点是没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）。")])]),t._v(" "),_("h3",{attrs:{id:"说一说进程同步有哪几种机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说一说进程同步有哪几种机制"}},[t._v("#")]),t._v(" 说一说进程同步有哪几种机制")]),t._v(" "),_("p",[t._v("原子操作、信号量机制、自旋锁管程、会合、分布式系统")])])}),[],!1,null,null,null);v.default=s.exports}}]);