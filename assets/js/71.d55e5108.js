(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{479:function(t,e,r){"use strict";r.r(e);var a=r(21),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"spring的-schedule注解是如何实现的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring的-schedule注解是如何实现的"}},[t._v("#")]),t._v(" spring的@Schedule注解是如何实现的")]),t._v(" "),r("p",[t._v("这个是spring内置的一个模块，整个调度模块完全依赖于"),r("code",[t._v("TaskScheduler")]),t._v("实现，更底层的是"),r("code",[t._v("JUC")]),t._v("调度线程池"),r("code",[t._v("ScheduledThreadPoolExecutor")])]),t._v(" "),r("p",[t._v("深入参考： "),r("a",{attrs:{href:"https://www.cnblogs.com/throwable/p/12616945.html#%E5%B0%8F%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("通过源码理解Spring中@Scheduled的实现原理并且实现调度任务动态装载"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"springboot和spring区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot和spring区别"}},[t._v("#")]),t._v(" SpringBoot和Spring区别")]),t._v(" "),r("ul",[r("li",[t._v("SpringBoot基于spring，它帮你把spring的复杂的配置给简化了，我们可以直接使用")]),t._v(" "),r("li",[t._v("SpringBoot内置了tomcat服务器，无需再进行配置，开箱即用")])]),t._v(" "),r("h3",{attrs:{id:"bean加载的流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bean加载的流程"}},[t._v("#")]),t._v(" Bean加载的流程")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("getBean")]),t._v("   一个bean在spring中只会加载一次，后面如果想再获取的时候，就会从缓存中获取")]),t._v(" "),r("li",[r("strong",[t._v("实例化")]),t._v("  缓存中的bean是最原始的状态，需要进行实例化，使用createBeanInstance来进行实例化")]),t._v(" "),r("li",[r("strong",[t._v("填充属性")])]),t._v(" "),r("li",[r("strong",[t._v("初始化")])])]),t._v(" "),r("h3",{attrs:{id:"spring中的设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring中的设计模式"}},[t._v("#")]),t._v(" spring中的设计模式")]),t._v(" "),r("p",[t._v("涉及到以下几种")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("1.简单工厂(非23种设计模式中的一种)")])]),t._v(" "),r("li",[r("p",[t._v("2.工厂方法")]),t._v(" "),r("p",[t._v("BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建这个要根据具体情况来定")])]),t._v(" "),r("li",[r("p",[t._v("3.单例模式")]),t._v(" "),r("p",[t._v("依赖注入Bean实例默认是单例的")])]),t._v(" "),r("li",[r("p",[t._v("4.适配器模式")]),t._v(" "),r("p",[t._v("SpringMVC中的适配器HandlerAdatper（HandlerAdatper根据Handler规则执行不同的Handler）")])]),t._v(" "),r("li",[r("p",[t._v("5.装饰器模式")]),t._v(" "),r("p",[t._v("Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator，就是动态给一个对象添加一些额外的职责")])]),t._v(" "),r("li",[r("p",[t._v("6.代理模式")]),t._v(" "),r("p",[t._v("AOP底层就是使用代理模式来实现的（包括动态代理和静态代理）")])]),t._v(" "),r("li",[r("p",[t._v("7.观察者模式")]),t._v(" "),r("p",[t._v("spring的事件驱动模型使用的是 观察者模式 ，Spring中Observer模式常用的地方是listener的实现。")])]),t._v(" "),r("li",[r("p",[t._v("8.策略模式")]),t._v(" "),r("p",[t._v("Spring框架的资源访问Resource接口。该接口提供了更强的资源访问能力，Spring 框架本身大量使用了 Resource 接口来访问底层资源。")])]),t._v(" "),r("li",[r("p",[t._v("9.模版方法模式")]),t._v(" "),r("p",[t._v("JDBC的抽象和对Hibernate的集成，都采用了一种理念或者处理方式，那就是模板方法模式与相应的Callback接口相结合。")])])]),t._v(" "),r("p",[t._v("参考："),r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/114244039",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring 中经典的 9 种设计模式，打死也要记住啊！ - 知乎 (zhihu.com)"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"自动装配流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自动装配流程"}},[t._v("#")]),t._v(" 自动装配流程")]),t._v(" "),r("p",[t._v("其实就是 "),r("strong",[t._v("@EnableAutoConfiguration注解")]),t._v(" (开启自动配置)，这个注解点进去后就可以看到导入自动装配选择器AutoConfigurationImportSelector")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/27/811bd2a7dfaba.png",alt:"image-20210327102754811"}})]),t._v(" "),r("p",[t._v("再点击这个类进入，就可以看到具体实现了")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/27/9270a8a273a00.png",alt:"image-20210327102943867"}})]),t._v(" "),r("p",[t._v("在loadFactoryNames方法在一个叫SpringFactoriesLoader类中，有一个地方可以加载资源")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/27/fd59c73f88a02.png",alt:"image-20210327103115393"}})]),t._v(" "),r("p",[t._v("SpringBoot的自动配置就是"),r("strong",[t._v("通过自定义实现ImportSelector接口，然后通过SpringFactoriesLoader扫描autoconfigure包下的META-INF/spring.factories中所有路径下的类，并通过反射实例化成一个个的配置类并注入到Spring容器中，从而实现了自动装配")]),t._v("，想到这里，我们其实也可以自定一个starter，然后交给SpringBoot自动来装配即可")]),t._v(" "),r("p",[t._v("参考")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/qq_40553042/article/details/109425424",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot自动装配原理与启动流程_我的鱼要死了的博客-CSDN博客_springboot启动过程"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"factorybean-和-beanfactory有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#factorybean-和-beanfactory有什么区别"}},[t._v("#")]),t._v(" FactoryBean 和 BeanFactory有什么区别？")]),t._v(" "),r("p",[t._v("BeanFactory 是 Bean 的工厂， ApplicationContext 的父类，IOC 容器的核心，负责生产和管理 Bean 对象。")]),t._v(" "),r("p",[t._v("FactoryBean 是 Bean，可以通过实现 FactoryBean 接口定制实例化 Bean 的逻辑，通过代理一个Bean对象，对方法前后做一些操作。")]),t._v(" "),r("p",[t._v("参考")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/aspirant/p/9082858.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("BeanFactory 简介以及它 和FactoryBean的区别(阿里面试) - aspirant - 博客园 (cnblogs.com)"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"springbean的生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springbean的生命周期"}},[t._v("#")]),t._v(" SpringBean的生命周期")]),t._v(" "),r("ol",[r("li",[t._v("实例化，创建一个Bean对象")]),t._v(" "),r("li",[t._v("填充属性，为属性赋值")]),t._v(" "),r("li",[t._v("初始化")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("如果实现了"),r("code",[t._v("xxxAware")]),t._v("接口，通过不同类型的Aware接口拿到Spring容器的资源")])]),t._v(" "),r("li",[r("p",[t._v("如果实现了BeanPostProcessor接口，则会回调该接口的"),r("code",[t._v("postProcessBeforeInitialzation")]),t._v("和"),r("code",[t._v("postProcessAfterInitialization")]),t._v("方法")])]),t._v(" "),r("li",[r("p",[t._v("如果配置了"),r("code",[t._v("init-method")]),t._v("方法，则会执行"),r("code",[t._v("init-method")]),t._v("配置的方法")])]),t._v(" "),r("li",[r("p",[t._v("容器关闭后，如果Bean实现了"),r("code",[t._v("DisposableBean")]),t._v("接口，则会回调该接口的"),r("code",[t._v("destroy")]),t._v("方法")])]),t._v(" "),r("li",[r("p",[t._v("如果配置了"),r("code",[t._v("destroy-method")]),t._v("方法，则会执行"),r("code",[t._v("destroy-method")]),t._v("配置的方法")])])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-启动流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-启动流程"}},[t._v("#")]),t._v(" spring boot 启动流程")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img.xiaoyou66.com/2021/03/30/e2e1d50353942.jpg",alt:"preview"}})]),t._v(" "),r("ol",[r("li",[t._v("准备环境，根据不同的环境创建不同的Environment")]),t._v(" "),r("li",[t._v("准备、加载上下文，为不同的环境选择不同的Spring Context，然后加载资源，配置Bean")]),t._v(" "),r("li",[t._v("初始化，这个阶段刷新Spring Context，启动应用")]),t._v(" "),r("li",[t._v("最后结束流程")])]),t._v(" "),r("h3",{attrs:{id:"spring-ioc容器之中beanfactory和applicationcontext的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc容器之中beanfactory和applicationcontext的区别"}},[t._v("#")]),t._v(" Spring IoC容器之中BeanFactory和ApplicationContext的区别")]),t._v(" "),r("p",[t._v("一般而言我们推荐使用ApplicationContext，原因是：")]),t._v(" "),r("ol",[r("li",[t._v("ApplicationContext是利用Java反射机制，自动识别出配置文件之中定义的 BeanpostProcessor,InstantiationAwareBeanPostProcessor和 BeanFactoryPostProcessor（这些相当于是在Bean创建前后对Bean做点操作，比如赋个值啥的），并且"),r("strong",[t._v("自动注册")]),t._v("到应用上下文之中。而BeanFactory需要在代码之中手动调用addBeanPostProcessor()来进行注册。")]),t._v(" "),r("li",[t._v("ApplicationContext在初始化应用上下文的时候就实例化所有单实例的Bean,但是BeanFactory在初始化容器的时候没有实例化Bean，直到第一次访问某个Bean的时候才实例化目标bean")])]),t._v(" "),r("h2",{attrs:{id:"杂项"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#杂项"}},[t._v("#")]),t._v(" 杂项")]),t._v(" "),r("h3",{attrs:{id:"controller和-restcontroller区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#controller和-restcontroller区别"}},[t._v("#")]),t._v(" @Controller和@RestController区别？")]),t._v(" "),r("p",[t._v("@Controller是返回一个JSP页面，但是@RestController返回的是JSON或者XML格式的数据。")]),t._v(" "),r("p",[t._v("@RestController = @Controller + @ResponseBody")]),t._v(" "),r("h3",{attrs:{id:"spring之中bean的作用域有哪些"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring之中bean的作用域有哪些"}},[t._v("#")]),t._v(" Spring之中Bean的作用域有哪些？")]),t._v(" "),r("p",[t._v("有五种，最后一种已经没了。")]),t._v(" "),r("ol",[r("li",[t._v("singleton：默认，单例模式")]),t._v(" "),r("li",[t._v("prototype： 每次请求都会生成一个新的bean实例")]),t._v(" "),r("li",[t._v("request: 每次请求都会产生一个bean，其仅在当前的HTTP request之中有效")]),t._v(" "),r("li",[t._v("session: 每次请求都会生成一个bean，仅在当前的HTTP session之中有效。")]),t._v(" "),r("li",[t._v("global-session： 全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话")])]),t._v(" "),r("h3",{attrs:{id:"spring-之中单例-bean-的线程安全问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-之中单例-bean-的线程安全问题"}},[t._v("#")]),t._v(" Spring 之中单例 bean 的线程安全问题")]),t._v(" "),r("p",[t._v("多个线程操作同一个对象的时候，对这个对象的非静态成员的变量的写操作会存在线程问题。说白了，如果你的bean之中是有”状态“——比如有一个变量，那么就会存在线程安全问题。")]),t._v(" "),r("p",[t._v("两种方法：")]),t._v(" "),r("ol",[r("li",[t._v("在Bean对象之中尽可能避免可变的成员变量——Servlet之中所有参数全在方法上，自然没有多线程问题")]),t._v(" "),r("li",[t._v("在类之中定义一个ThreadLocal，将需要可变的变量存在ThreadLocal之中。")])]),t._v(" "),r("h3",{attrs:{id:"component-和-bean-区别在哪"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#component-和-bean-区别在哪"}},[t._v("#")]),t._v(" @Component 和 @Bean 区别在哪？")]),t._v(" "),r("ol",[r("li",[t._v("对象不同：@Component 注解在类上，@Bean 注解在方法上")]),t._v(" "),r("li",[t._v("@Bean 注解比 @Component 的自定义性更强。比如引用第三方库的类需要装配到Spring容器之中时（比如@Configuration的），我们就只能使用@Bean")])]),t._v(" "),r("p",[t._v("而且如果对于一个类，我们直接使用@Component, 那么可能内部有些不需要的类我们也生成了。@Bean的控制粒度更细")]),t._v(" "),r("h3",{attrs:{id:"transactional-rollback-exception-class-作用是"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#transactional-rollback-exception-class-作用是"}},[t._v("#")]),t._v(" @Transactional(rollback=Exception.class)作用是？")]),t._v(" "),r("p",[t._v("如果不加这个，那么只有遇到"),r("code",[t._v("RuntimeException")]),t._v("才会回滚。加了的话，在非运行异常时候也会回滚。")]),t._v(" "),r("h3",{attrs:{id:"使用同一个类之中一个没有事务的方法去调用另一个有事务的方法-是否会有事务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用同一个类之中一个没有事务的方法去调用另一个有事务的方法-是否会有事务"}},[t._v("#")]),t._v(" 使用"),r("code",[t._v("同一个类")]),t._v("之中一个没有事务的方法去调用另一个有事务的方法，是否会有事务？")]),t._v(" "),r("p",[t._v("答案是不会。而且和事务的传播机制没关系。")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://timzhouyes.github.io/2020/04/27/Spring%E5%AE%B6%E6%97%8F/#54-%E4%BD%BF%E7%94%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%B9%8B%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%B2%A1%E6%9C%89%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%96%B9%E6%B3%95%E5%8E%BB%E8%B0%83%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%9C%89%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E5%90%A6%E4%BC%9A%E6%9C%89%E4%BA%8B%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring家族详解 - Timzhouyes的博客 | Timzhouyes's Blog"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://timzhouyes.github.io/2020/04/27/Spring%E5%AE%B6%E6%97%8F/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring家族详解 - Timzhouyes的博客 | Timzhouyes's Blog"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);