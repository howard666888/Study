(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{487:function(t,v,e){"use strict";e.r(v);var i=e(21),_=Object(i.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git init")]),t._v(" 初始化git仓库")]),t._v(" "),e("li",[e("code",[t._v("git clone")]),t._v(" 克隆git仓库")]),t._v(" "),e("li",[e("code",[t._v("git remote add origin ***.git")]),t._v(" 添加一个新的远程残酷")]),t._v(" "),e("li",[e("code",[t._v("git push -u origin master")]),t._v(" 本地的 master 分支推送到 origin 主机的 master 分支。")]),t._v(" "),e("li",[t._v("推送到远程仓库的dev分支："),e("code",[t._v("git push origin dev")])]),t._v(" "),e("li",[e("code",[t._v("git log")]),t._v(" 查看提交历史")]),t._v(" "),e("li",[e("code",[t._v("git log --graph --pretty=oneline --abbrev-commit")])]),t._v(" "),e("li",[e("code",[t._v("git status")]),t._v(" 显示显示工作目录和暂存区的状态")]),t._v(" "),e("li",[e("code",[t._v("git diff")]),t._v(" 比较文件在暂存区和工作区的差异")]),t._v(" "),e("li",[e("code",[t._v("git add *")]),t._v(" 把所有的内容都加到缓存区")]),t._v(" "),e("li",[e("code",[t._v('git commit -m "message"')]),t._v(" git提交代码，并假设提交信息")]),t._v(" "),e("li",[t._v("commit之后又改了一个小bug，但是又不想增加一个commit，可以用："),e("code",[t._v("git commit --amend --no-edit")]),t._v("，直接将改动添加到上一次的commit中")]),t._v(" "),e("li",[e("code",[t._v("git push")]),t._v(" 把本地的分支推到远程仓库")]),t._v(" "),e("li",[e("code",[t._v("git pull")]),t._v(" 拉取最新的git代码")]),t._v(" "),e("li",[e("code",[t._v("touch .gitignore")]),t._v(" 创建一个.gitignore文件")])]),t._v(" "),e("h2",{attrs:{id:"git标签管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git标签管理"}},[t._v("#")]),t._v(" git标签管理")]),t._v(" "),e("ul",[e("li",[t._v("首先切换到需要打标签的分支上，然后使用"),e("code",[t._v("git tag v1.0")]),t._v("就可以在当前commit打上v1.0的标签")]),t._v(" "),e("li",[e("code",[t._v("git tag v1.0 commitID")]),t._v(" 对特定commit打标签")]),t._v(" "),e("li",[t._v("打标签时加上message："),e("code",[t._v('git tag -a <tagname> -m "message"')])]),t._v(" "),e("li",[e("code",[t._v("git tag")]),t._v(" 查看所有标签")]),t._v(" "),e("li",[e("code",[t._v("git show [tagname]")]),t._v(" 查看标签详细信息")]),t._v(" "),e("li",[e("code",[t._v("git push origin <tagname>")]),t._v("可以推送一个本地标签到远程仓库")]),t._v(" "),e("li",[e("code",[t._v("git push origin --tags")]),t._v("可以推送全部未推送过的本地标签")]),t._v(" "),e("li",[e("code",[t._v("git tag -d <tagname>")]),t._v("可以删除一个本地标签")]),t._v(" "),e("li",[e("code",[t._v("git push origin :refs/tags/<tagname>")]),t._v("可以删除一个远程标签（先从本地删除）")])]),t._v(" "),e("h2",{attrs:{id:"git撤销与回滚"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git撤销与回滚"}},[t._v("#")]),t._v(" Git撤销与回滚")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("暂存区")]),t._v("："),e("code",[t._v("git add")]),t._v("之后commit之前存在的区域；"),e("strong",[t._v("工作区")]),t._v("："),e("code",[t._v("git commit")]),t._v("之后存在的区域；"),e("strong",[t._v("远程仓库")]),t._v("："),e("code",[t._v("git push")]),t._v("之后；")])]),t._v(" "),e("li",[e("p",[t._v("作了修改，但还没"),e("code",[t._v("git add")]),t._v("，撤销到上一次提交："),e("code",[t._v("git checkout -f -- filename")]),t._v("；"),e("code",[t._v("git checkout -f -- .")])])]),t._v(" "),e("li",[e("p",[t._v("作了修改，并且已经")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("，但还没")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git commit\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("先将暂存区的修改撤销："),e("code",[t._v("git reset HEAD filename")]),t._v("/"),e("code",[t._v("git reset HEAD")]),t._v('；此时修改只存在于工作区，变为了 "unstaged changes"；')]),t._v(" "),e("li",[t._v("再利用上面的checkout命令从工作区撤销修改")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("git add")]),t._v("之后，作了修改，想丢弃这次修改："),e("code",[t._v("git checkout -f --filename")]),t._v("会回到最近一次"),e("code",[t._v("git add")])])]),t._v(" "),e("li",[e("p",[t._v("作了修改，并且已经")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git commit\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("了，想撤销这次的修改：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git revert commitID")]),t._v(". 其实，"),e("code",[t._v("git revert")]),t._v("可以用来撤销任意一次的修改，不一定要是最近一次")]),t._v(" "),e("li",[e("code",[t._v("git reset --hard commitID")]),t._v("/"),e("code",[t._v("git reset --hard HEAD^")]),t._v("（HEAD表示当前版本，几个^表示倒数第几个版本，倒数第100个版本可以用HEAD~100）；参数"),e("code",[t._v("--hard")]),t._v("：强制将暂存区和工作区都同步到指定的版本")]),t._v(" "),e("li",[e("code",[t._v("git reset")]),t._v("和"),e("code",[t._v("git revert")]),t._v("的区别是：reset是用来回滚的，将HEAD的指针指向了想要回滚的版本，作为最新的版本，而后面的版本也都没有了；而revert只是用来撤销某一次更改，对之后的更改并没有影响")]),t._v(" "),e("li",[t._v("然后再用"),e("code",[t._v("git push -f")]),t._v("提交到远程仓库")])])])]),t._v(" "),e("h2",{attrs:{id:"git-分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-分支管理"}},[t._v("#")]),t._v(" Git 分支管理")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("创建分支: "),e("code",[t._v("git branch test")])])]),t._v(" "),e("li",[e("p",[t._v("切换分支: "),e("code",[t._v("git checkout test")])])]),t._v(" "),e("li",[e("p",[t._v("创建并切换分支："),e("code",[t._v("git checkout -b test")])])]),t._v(" "),e("li",[e("p",[t._v("将test分支的更改合并到master分支：先在test分支上commit、push，再："),e("code",[t._v("git checkout master")]),t._v("; "),e("code",[t._v("git merge test")])])]),t._v(" "),e("li",[e("p",[t._v("如果合并时产生冲突：先手动解决冲突，再合并")])]),t._v(" "),e("li",[e("p",[t._v("删除分支："),e("code",[t._v("git branch -d test")])])]),t._v(" "),e("li",[e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git stash\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("ul",[e("li",[t._v("如果当前分支还有任务没有做完，也不想提交，但此时需要切换或者创建其它分支，就可以使用stash将当前分支的所有修改（包括暂存区）先储藏起来；然后就可以切换到其它分支")]),t._v(" "),e("li",[t._v("在其它分支工作完成之后，首先切换回原来的分支，然后使用"),e("code",[t._v("git stash list")]),t._v("命令查看")]),t._v(" "),e("li",[t._v("可以使用"),e("code",[t._v("git stash apply <stash number>")]),t._v("恢复之前储藏的工作现场，再使用"),e("code",[t._v("git stash drop <stash number>")]),t._v("删除掉储藏的内容")]),t._v(" "),e("li",[t._v("也可以直接用"),e("code",[t._v("git stash pop")]),t._v("恢复并删除内容")])])]),t._v(" "),e("li",[e("p",[t._v("如果在其它分支上做了一个修改（比如修复了一个bug，这次修改有一个commitID），想要将这次修改应用到当前分支上，可以使用："),e("code",[t._v("git cherry-pick commitID")]),t._v("，可以复制一个特定的提交到当前分支")])])])])}),[],!1,null,null,null);v.default=_.exports}}]);